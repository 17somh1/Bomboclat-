def _format_result(self, observable_type, observable_value):
    try:
        if observable_type in ["IPv4-Addr", "IPv6-Addr"]:
            host = self.hosts.view(observable_value)
            services = host.get("services", [])
            location = host.get("location", {})
            coords = location.get("coordinates", {})
            country = location.get("country", "N/A")
            city = location.get("city", "N/A")
            latitude = float(coords.get("latitude")) if coords.get("latitude") else "N/A"
            longitude = float(coords.get("longitude")) if coords.get("longitude") else "N/A"

            asn_info = host.get("autonomous_system", {})
            asn = asn_info.get("asn", "N/A")
            asn_name = asn_info.get("name", "N/A")
            asn_desc = asn_info.get("description", "N/A")
            bgp_prefix = asn_info.get("bgp_prefix", "N/A")

            os_info = host.get("operating_system", {})
            os_name = os_info.get("product", "N/A")
            os_version = os_info.get("version", "")
            os_vendor = os_info.get("vendor", "")
            os_cpe = os_info.get("uniform_resource_identifier", "N/A")

            tags = ", ".join(host.get("tags", [])) or "None"
            last_updated = host.get("last_updated_at", "N/A")

            cert = host.get("certificate", None)

            markdown = f"""## 🔍 Censys Enrichment: IP `{observable_value}`

**📍 Location:** {country}, {city}  
**🌐 Coordinates:** {latitude}, {longitude}  
**🏢 ASN:** {asn} ({asn_name})  
**🧠 ASN Description:** {asn_desc}  
**🧭 BGP Prefix:** {bgp_prefix}  
**🏷️ Tags:** {tags}  
**🕒 Last Updated:** {last_updated}  

### 🖥️ Operating System
- {os_name} {os_version} ({os_vendor})  
- CPE: `{os_cpe}`

### 🔓 Open Ports
{', '.join(str(s['port']) for s in services) or 'None'}

### ⚙️ Services
"""
            for s in services:
                port = s.get("port")
                name = s.get("service_name", "Unknown")
                extended = s.get("extended_service_name", "Unknown")
                transport = s.get("transport_protocol", "N/A")
                product = s.get("software", [{}])[0].get("product") if s.get("software") else "N/A"
                cert_sha256 = s.get("tls", {}).get("certificate", {}).get("fingerprint_sha256", None)

                markdown += f"""- **Port {port}/{transport}**  
  - Service: {name} ({extended})  
  - Product: {product}"""

                dns_type = s.get("dns", {}).get("server_type")
                if dns_type:
                    markdown += f"\n  - DNS Server Type: {dns_type}"

                http_resp = s.get("http", {}).get("response", {})
                status_code = http_resp.get("status_code")
                if status_code:
                    server_header = http_resp.get("headers", {}).get("Server", ["N/A"])[0]
                    markdown += f"\n  - HTTP Status: {status_code} ({server_header})"

                if cert_sha256:
                    markdown += f"\n  - TLS Cert SHA-256: `{cert_sha256}`"

                markdown += "\n"

            if cert:
                markdown += f"\n🔐 Top-level Certificate: `{cert}`\n"

            markdown += f"\n🔗 [View on Censys](https://search.censys.io/hosts/{observable_value})"
            return markdown

        else:
            return None

    except Exception as e:
        return f"⚠️ Error during enrichment: {str(e)}"
