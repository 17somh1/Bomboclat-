def _format_result(self, observable_type, observable_value):
    try:
        if observable_type in ["IPv4-Addr", "IPv6-Addr"]:
            host = self.hosts.view(observable_value)
            services = host.get("services", [])
            location = host.get("location", {})
            coords = location.get("coordinates", {})
            country = location.get("country", "N/A")
            city = location.get("city", "N/A")
            latitude = float(coords.get("latitude")) if coords.get("latitude") else "N/A"
            longitude = float(coords.get("longitude")) if coords.get("longitude") else "N/A"

            asn_info = host.get("autonomous_system", {})
            asn = asn_info.get("asn", "N/A")
            asn_name = asn_info.get("name", "N/A")
            asn_desc = asn_info.get("description", "N/A")
            bgp_prefix = asn_info.get("bgp_prefix", "N/A")

            os_info = host.get("operating_system", {})
            os_name = os_info.get("product", "N/A")
            os_version = os_info.get("version", "")
            os_vendor = os_info.get("vendor", "")
            os_cpe = os_info.get("uniform_resource_identifier", "N/A")

            tags = ", ".join(host.get("tags", [])) or "None"
            last_updated = host.get("last_updated_at", "N/A")
            cert = host.get("certificate", None)

            markdown = f"""## 🔍 Censys Enrichment: IP `{observable_value}`

### 🗺️ Location
- Country: {country}
- City: {city}
- Coordinates: {latitude}, {longitude}

### 🏢 ASN Info
- ASN: {asn}
- Name: {asn_name}
- Description: {asn_desc}
- BGP Prefix: {bgp_prefix}

### 🏷️ Metadata
- Tags: {tags}
- Last Updated: {last_updated}

### 🖥️ Operating System
- {os_name} {os_version} ({os_vendor})
- CPE: `{os_cpe}`

### 🔓 Open Ports
{', '.join(str(s['port']) for s in services) or 'None'}

### ⚙️ Services
"""
            for s in services:
                port = s.get("port")
                name = s.get("service_name", "Unknown")
                extended = s.get("extended_service_name", "Unknown")
                transport = s.get("transport_protocol", "N/A")
                product = s.get("software", [{}])[0].get("product") if s.get("software") else "N/A"
                cert_sha256 = s.get("tls", {}).get("certificate", {}).get("fingerprint_sha256")

                markdown += f"""- **Port {port}/{transport}**
  - Service: {name} ({extended})
  - Product: {product}"""

                dns_type = s.get("dns", {}).get("server_type")
                if dns_type:
                    markdown += f"\n  - DNS Server Type: {dns_type}"

                http_resp = s.get("http", {}).get("response", {})
                status_code = http_resp.get("status_code")
                if status_code:
                    server_header = http_resp.get("headers", {}).get("Server", ["N/A"])[0]
                    markdown += f"\n  - HTTP Status: {status_code} ({server_header})"

                if cert_sha256:
                    markdown += f"\n  - TLS Cert SHA-256: `{cert_sha256}`"

                markdown += "\n"

            if cert:
                markdown += f"\n🔐 **Top-level Certificate:** `{cert}`\n"

            markdown += f"\n🔗 [View on Censys](https://search.censys.io/hosts/{observable_value})"
            return markdown

        elif observable_type == "Domain-Name":
            certs_pages = self.certs.search(f"names: {observable_value}", per_page=100)

            markdown = f"""## 🔍 Censys Enrichment: Domain `{observable_value}`

### 📄 Associated Certificates
"""
            for page in certs_pages:
                for cert in page:
                    sha256 = cert.get("fingerprint_sha256", "N/A")
                    raw_names = cert.get("names", [])
                    names = ", ".join(sum(raw_names, [])) if raw_names else "N/A"

                    parsed = cert.get("parsed", {})
                    subject_dn = parsed.get("subject_dn", "N/A")
                    issuer_dn = parsed.get("issuer_dn", "N/A")
                    validity = parsed.get("validity_period", {})
                    valid_from = validity.get("not_before", "N/A")
                    valid_to = validity.get("not_after", "N/A")

                    markdown += f"""- **SHA-256:** `{sha256}`
  - Names: {names}
  - Subject DN: {subject_dn}
  - Issuer DN: {issuer_dn}
  - Validity: {valid_from} → {valid_to}

"""

            markdown += f"🔗 [View on Censys](https://search.censys.io/domains/{observable_value})"
            return markdown

        elif observable_type == "X509-Certificate-SHA256":
            cert = self.certs.view(observable_value)
            names = ", ".join(cert.get("names", []))

            parsed = cert.get("parsed", {})
            subject_dn = parsed.get("subject_dn", "N/A")
            issuer_dn = parsed.get("issuer_dn", "N/A")
            validity = parsed.get("validity_period", {})
            valid_from = validity.get("not_before", "N/A")
            valid_to = validity.get("not_after", "N/A")
            self_signed = parsed.get("is_self_signed", "N/A")

            key_info = parsed.get("subject_key_info", {})
            key_algo = key_info.get("key_algorithm", "N/A")
            key_size = key_info.get("rsa_public_key", {}).get("length", "N/A")

            markdown = f"""## 🔍 Censys Enrichment: Certificate `{observable_value}`

### 🧾 Certificate Info
- Names: {names}
- Subject DN: {subject_dn}
- Issuer DN: {issuer_dn}
- Validity: {valid_from} → {valid_to}
- Self-Signed: {self_signed}

### 🔐 Public Key
- Algorithm: {key_algo}
- Size: {key_size} bits

🔗 [View on Censys](https://search.censys.io/certificates/{observable_value})
"""
            return markdown

    except Exception as e:
        return f"⚠️ Error during enrichment: {str(e)}"
